(************************************************)
(*       AUTOGENERATED FILE - DO NOT EDIT!      *)
(************************************************)
(* Generated by: ocaml-protoc-plugin            *)
(* https://github.com/issuu/ocaml-protoc-plugin *)
(************************************************)
(*
  Source: google/protobuf/duration.proto
  Syntax: proto3
  Parameters:
    debug=false
    annot='[@@deriving sexp_of]'
    opens=[Core]
    int64_as_int=true
    int32_as_int=true
    fixed_as_int=false
    singleton_record=false
*)

open Ocaml_protoc_plugin.Runtime [@@warning "-33"]
open Core [@@warning "-33"]
module Google = struct
  module Protobuf = struct
    module rec Duration : sig
      val name': unit -> string
      type t = { seconds: int; nanos: int } [@@deriving sexp_of]
      val make : ?seconds:int -> ?nanos:int -> unit -> t
      val to_proto: t -> Runtime'.Writer.t
      val from_proto: Runtime'.Reader.t -> (t, [> Runtime'.Result.error]) result
    end = struct 
      let name' () = "duration.google.protobuf.Duration"
      type t = { seconds: int; nanos: int }[@@deriving sexp_of]
      let make =
        fun ?seconds ?nanos () -> 
        let seconds = match seconds with Some v -> v | None -> 0 in
        let nanos = match nanos with Some v -> v | None -> 0 in
        { seconds; nanos }
      
      let to_proto =
        let apply = fun ~f:f' { seconds; nanos } -> f' [] seconds nanos in
        let spec = Runtime'.Serialize.C.( basic (1, int64_int, proto3) ^:: basic (2, int32_int, proto3) ^:: nil ) in
        let serialize = Runtime'.Serialize.serialize [] (spec) in
        fun t -> apply ~f:serialize t
      
      let from_proto =
        let constructor = fun _extensions seconds nanos -> { seconds; nanos } in
        let spec = Runtime'.Deserialize.C.( basic (1, int64_int, proto3) ^:: basic (2, int32_int, proto3) ^:: nil ) in
        let deserialize = Runtime'.Deserialize.deserialize [] spec constructor in
        fun writer -> deserialize writer |> Runtime'.Result.open_error
      
    end
  end
end